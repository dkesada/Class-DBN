% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BNCDBN.R
\name{BNCDBN}
\alias{BNCDBN}
\title{R6 class that defines the Bayesian network classifier + DBN model}
\arguments{
\item{lower}{lower bounds of the number of folds, epsilon and smooth}

\item{upper}{upper bounds of the number of folds, epsilon and smooth}

\item{itermax}{maximum number of iterations of the optimization process}

\item{test_per}{percentage of instances assigned as test in the optimization}

\item{optim_trace}{whether or not to print the progress of each optimization iteration}

\item{horizon}{integer value that defines the lenght of the forecasting with the DBN model}

\item{dt_test}{a data.table with the test dataset}

\item{print_res}{a boolean that determines whether or not should the results of the prediction be printed}

\item{conf_mat}{a boolean that determines whether or not should a confusion matrix be printed}

\item{dt_train}{a data.table with the training dataset}

\item{optim}{boolean that determines whether or not the Bayesian network classifier parameters should be optimized. 
Only the TAN models have parameters that can be optimized.}

\item{cl_params}{vector with the parameters of the Bayesian network classifier. c(n_folds, epsilon, smooth)}

\item{dt}{a data.table with the training dataset}
}
\value{
the prediction result vector

the prediction result vector
}
\description{
Initialize the object with some modifiable parameters of the optimization

Predict the objective variable in all the rows in a dataset with the 
XGBoost augmented by the DBN forecasting. The horizon sets the length of 
the forecasting with the DBN model.

Predict the objective variable in all the rows in a dataset using only
the Bayseian network classifier.

Fit the internal Bayesian network classifier

Optimize the parameters of the internal classifier. 
Slight changes with respect to the inherited function
}
\details{
The model is defined as a DBN model that forecasts the state of a time-series
based system and a Bayesian network classifier that classifies that predicted state.
Predicting with bnclassify requires the gRain package, which has unavailable dependencies
on CRAN that must be downloaded from bioconductor. It's kind of a pain, but there's not much I can
do about it
}
\section{Fields}{

\describe{
\item{\code{mcuts}}{master set of cut points of the discretization process}
}}

